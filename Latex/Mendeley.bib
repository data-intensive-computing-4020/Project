@misc{TutorialsPoint2018,
author = {TutorialsPoint},
title = {{Python Dictionary}},
url = {http://www.tutorialspoint.com/python/python_dictionary.htm},
urldate = {2018-05-15},
year = {2018}
}
@misc{Dalcin2017,
author = {Dalcin, Lisandro},
title = {{Overview â€” MPI for Python 3.0.0 documentation}},
url = {http://mpi4py.readthedocs.io/en/stable/overview.html?highlight=barrier},
urldate = {2018-05-15},
year = {2017}
}
@article{Ceran2012,
author = {Ceran, Erhan},
title = {{A C++ DISTRIBUTED DATABASE SELECT-PROJECT-JOIN QUERY PROCESSOR ON A HPC CLUSTER}},
url = {http://etd.lib.metu.edu.tr/upload/12614311/index.pdf},
year = {2012}
}
@article{Mohamed2015,
author = {Mohamed, Marwa Hussien and Khafagy, Mohamed Helmy},
title = {{Hash Semi Cascade Join for Joining Multi-Way Map Reduce}},
year = {2015}
}
@misc{Priyanka2013,
author = {Priyanka},
title = {{Map-side Join Vs. Join | Edureka Blog}},
url = {https://www.edureka.co/blog/map-side-join-vs-join},
urldate = {2018-05-15},
year = {2013}
}
@misc{Microsoft2012,
author = {Microsoft},
title = {{Understanding Nested Loops Joins | Microsoft Docs}},
url = {https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-2008-r2/ms191318(v=sql.105)},
urldate = {2018-05-15},
year = {2012}
}
@article{Beck,
author = {Beck, A and Beck, Arnaud},
title = {{Data Analysis With Python}},
url = {https://wis.kuleuven.be/CHARM/images/partners/python-lecture.pdf}
}
@article{Schneider1992,
abstract = {The join operator has been a cornerstone of relational database systems since their inception. As such, much time and effort has gone into making joins efficient. With the obvious trend towards multiprocessors, atten-tion has focused on efficiently parallelizing the join operation. In this paper we analyze and compare four parallel join algorithms. Grace and Hybrid hash represent the class of hash-based join methods, Simple hash represents a looping algorithm with hashing, and our last algorithm is the more traditional sort-merge. The Gamma database machine serves as the host for the performance comparison. Gamma's shared-nothing architecture with commer-cially available components is becoming increasingly common, both in research and in industry.},
author = {Schneider, Donovan A and Dewitt, David J},
title = {{A Performance Evaluation of Four Parallel Join Algorithms in a Shared-Nothing Multiprocessor Environment}},
url = {http://pages.cs.wisc.edu/~dewitt/includes/paralleldb/sigmod89.pdf},
year = {1992}
}
@article{Yu1997,
author = {Yu, Min J. and Sheu, P.C.-Y.},
doi = {10.1023/A:1008619705079},
journal = {Distributed and Parallel Databases},
number = {1},
pages = {5--30},
publisher = {Kluwer Academic Publishers},
title = {{Adaptive Join Algorithms in Dynamic Distributed Databases}},
url = {http://link.springer.com/10.1023/A:1008619705079},
volume = {5},
year = {1997}
}
@article{Barthels2017,
abstract = {Traditional database operators such as joins are relevant not only in the context of database engines but also as a build-ing block in many computational and machine learning algo-rithms. With the advent of big data, there is an increasing demand for efficient join algorithms that can scale with the input data size and the available hardware resources. In this paper, we explore the implementation of distributed join algorithms in systems with several thousand cores con-nected by a low-latency network as used in high performance computing systems or data centers. We compare radix hash join to sort-merge join algorithms and discuss their imple-mentation at this scale. In the paper, we explain how to use MPI to implement joins, show the impact and advantages of RDMA, discuss the importance of network scheduling, and study the relative performance of sorting vs. hashing. The experimental results show that the algorithms we present scale well with the number of cores, reaching a throughput of 48.7 billion input tuples per second on 4,096 cores.},
author = {Barthels, Claude and Uller, Ingo and Schneider, Timo and Alonso, Gustavo and Hoefler, Torsten},
journal = {VLDB Endowment},
title = {{Distributed Join Algorithms on Thousands of Cores}},
url = {http://www.vldb.org/pvldb/vol10/p517-barthels.pdf},
year = {2017}
}
@article{Bushan2007,
abstract = {In the current technological world, there is generation of enormous data each and every day by different media and social networks. The MapReduce framework is increasingly being used widely to analyse large volumes of data. One of the techniques that framework is join algorithm. Join algorithms can be divided into two groups: Reduce-side join and Map-side join. The aim of our work is to compare existing join algorithms which are used by the MapReduce framework. We have compared Reducer-side merge join and Map-side replication-join in terms of pre-processing, the number of phases involved, whether it is sensitive to data skew, whether there is need for distributed Cache, memory overflow. I INTRODUCTION Large-scaled data warehouse systems, data-intensive analysis, cloud computing technologies have been used by Data-intensive applications. Large-scale data analysis applications use MapReduce paradigm [6] to process the data. MapReduce Framework is a programming model that is used to process and generate large data sets. User specifies a map function that processes a (key value) pair to generate a set of intermediate (key value) pairs and a reduce function which will merge all the intermediate values associated with the intermediate key [5]. Let us look upon the execution of MapReduce execution. MapReduce Execution: The Map/Reduce framework consists of two operations, " map " and " reduce " , which are executed on a cluster of shared-nothing commodity nodes. In a map operation, the input data available through a distributed file system, is distributed among a number of nodes in the cluster in the form of key-value pairs. Each of these mapper nodes transforms a key-value pair into a list of intermediate key-value pairs [1]. The intermediate key-value pairs are propagated to the reducer nodes such that each reduce process receives values related to one key. The values are processed and the result is written to the file system [1].},
author = {Bushan, Mani and {Martina Devi}, Oinam and Professor, Assistant},
journal = {International Journal of Innovative Research in Computer and Communication Engineering (An ISO Certified Organization)},
number = {5},
title = {{Comparison of Join Algorithms in Map Reduce Framework}},
url = {www.ijircce.com},
volume = {32972},
year = {2007}
}
@article{Pigul,
abstract = {There are the following techniques that are used to analyze massive amounts of data: MapReduce paradigm, parallel DBMSs, column-wise store, and various combinations of these approaches. We focus in a MapReduce environment. Unfortunately, join algorithms is not directly supported in MapReduce. The aim of this work is to generalize and compare existing equi-join algorithms with some optimization techniques.},
author = {Pigul, A},
title = {{Comparative Study Parallel Join Algorithms for MapReduce environment}},
url = {http://www.ispras.ru/proceedings/docs/2012/23/isp_23_2012_285.pdf}
}
@article{Blanas2010,
abstract = {The MapReduce framework is increasingly being used to analyze large volumes of data. One important type of data analysis done with MapReduce is log processing, in which a click-stream or an event log is filtered, aggregated, or mined for patterns. As part of this analysis, the log of-ten needs to be joined with reference data such as informa-tion about users. Although there have been many stud-ies examining join algorithms in parallel and distributed DBMSs, the MapReduce framework is cumbersome for joins. MapReduce programmers often use simple but inefficient al-gorithms to perform joins. In this paper, we describe cru-cial implementation details of a number of well-known join strategies in MapReduce, and present a comprehensive ex-perimental comparison of these join techniques on a 100-node Hadoop cluster. Our results provide insights that are unique to the MapReduce platform and offer guidance on when to use a particular join algorithm on this new plat-form.},
author = {Blanas, Spyros and Patel, Jignesh M and Ercegovac, Vuk and Rao, Jun and Shekita, Eugene J and Tian, Yuanyuan},
title = {{A Comparison of Join Algorithms for Log Processing in MapReduce}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.644.9902&rep=rep1&type=pdf},
year = {2010}
}
@inproceedings{Blanas2010a,
author = {Blanas, Spyros and Patel, Jignesh M. and Ercegovac, Vuk and Rao, Jun and Shekita, Eugene J. and Tian, Yuanyuan},
doi = {10.1145/1807167.1807273},
isbn = {9781450300322},
pages = {975},
title = {{A comparison of join algorithms for log processing in MaPreduce}},
url = {http://portal.acm.org/citation.cfm?doid=1807167.1807273},
year = {2010}
}
@article{Palla2009,
author = {Palla, Konstantina},
title = {{A Comparative Analysis of Join Algorithms Using the Hadoop Map/Reduce Framework}},
url = {https://www.inf.ed.ac.uk/publications/thesis/online/IM090720.pdf},
year = {2009}
}
@article{Schuh2016,
author = {Schuh, Stefan and Chen, Xiao and Dittrich, Jens},
doi = {10.1145/2882903.2882917},
title = {{An Experimental Comparison of Thirteen Relational Equi-Joins in Main Memory}},
url = {http://infosys.cs.uni-saarland.de},
year = {2016}
}
@article{Helmer,
author = {Helmer, Sven and Moerkotte, Guido},
title = {{Evaluation of Main Memory Join Algorithms for Joins with Subset Join Predicates}},
url = {https://pdfs.semanticscholar.org/fc92/442c3ba6f7446f8860f842e42c0190fb832c.pdf}
}
@book{Stephens2004,
author = {Stephens, Jon and Russell, Chad},
pages = {239--271},
title = {{Beginning MySQL Database Design and Optimization: From Novice to Professional}},
url = {http://download.nust.na/pub6/mysql/tech-resources/articles/mysql-db-design-ch5.pdf},
year = {2004}
}
@article{McTaggart,
author = {McTaggart, Casey},
title = {{Hadoop/MapReduce Object-oriented framework presentation}},
url = {https://www.cs.colorado.edu/~kena/classes/5448/s11/presentations/hadoop.pdf}
}
@article{Mishra1992,
author = {Mishra, Priti and Eich, Margaret H},
journal = {ACM Computing Surveys},
number = {1},
title = {{Join Processing in Relational Databases}},
url = {http://www.csd.uoc.gr/~hy460/pdf/p63-mishra.pdf},
volume = {24},
year = {1992}
}
@article{Chu,
author = {Chu, Shumo and Balazinska, Magdalena and Suciu, Dan},
doi = {10.1145/2723372.2750545},
title = {{From Theory to Practice: Efficient Join Query Evaluation in a Parallel Database System}},
url = {https://homes.cs.washington.edu/~chushumo/files/sigmod_15_join.pdf}
}
@article{Albutiu,
author = {Albutiu, Martina-Cezara and Kemper, Alfons and Neumann, Thomas},
title = {{Massively Parallel Sort-Merge Joins in Main Memory Multi-Core Database Systems}},
url = {https://15721.courses.cs.cmu.edu/spring2018/papers/20-sortmergejoins/p1064-albutiu.pdf}
}
